https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum/description/




class Solution {
public:
 int MOD=1e9+7;
    int numOfSubarrays(vector<int>& nums) {
        int n=nums.size();
        vector<int>prefix(n,0);
        int ans=0;
        prefix[0]=nums[0];
        for(int i=1;i<n;i++){
            prefix[i]=prefix[i-1]+nums[i];
        }
        int count_even=0,count_odd=0;
        for(int i=0;i<n;i++){
          if(prefix[i]&1){
            ans=(ans+count_even)%MOD;
            ans++; // this is due to consideration of full array till that index 
            count_odd++;
          }
          else{
            ans=(ans+count_odd)%MOD;
            count_even++;
          }
        }
        return ans;
    }
};
//0  1  2  3   4   5   6   -->i(index)

//1  3  5  7   9   11  13  -->nums[i]

//1  4  9  16  25  36  49  -->prefix sum

//1  1  2  2   3   3   4   -->count of ans contributed at every index 


//now i will explain how ans is what at every index

//i=0
//subarray->
//1

//i=1
//subarray->
//3

//i=2
//subarray->
//5
//1 3 5

//i=3
//subarray->
//7 
//3 5 7

//i=4
//subarray->
//1 3 5 7 9
//5 7 9
//9

//i=5
//subarray->
//3 5 7 9 11
//7 9 11
//11

//i=6
//subarray->
//1 3 5 7 9 11 13
//5 7 9 11 13
//9 11 13
//13


//crux of this problem is that odd+even=odd

//so whenever we got odd prefix sum
//look for prefix sum that is even on left side of that index
//because after removing those even sums we will get odd prefix sum remaning
//odd-even=odd
