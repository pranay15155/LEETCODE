https://leetcode.com/problems/combination-sum-ii/description/?envType=problem-list-v2&envId=backtracking

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int sum = 0;
        int n = candidates.size();
        vector<int> temp;
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        auto f = [&](auto&& self, int ind, vector<int>& temp, int sum) -> void {
            if (sum == target) {
                ans.push_back(temp);
                return;
            }
            if (ind >= n || sum > target)
                return;

            unordered_map<int,int>mp;
            for(int i=ind;i<n;i++){
                if(mp.find(candidates[i])!=mp.end()){
                    continue;
                }
                else{
                    temp.push_back(candidates[i]);
                    sum+=candidates[i];
                    mp[candidates[i]]++;
                    self(self,i+1,temp,sum);
                    sum-=candidates[i];
                    temp.pop_back();
                }
            }
        };
        f(f, 0, temp, sum);
        return ans;
    }
};

//Watch striver explanation video if yu donot get the solution 
//basically i have used map to prevent the same element two times in that recursion call
//yu can pick same element again in next recusrion call but not in that one
//watch striver video and his dry run it will get clear or else do a dry run 

https://www.youtube.com/watch?v=G1fRTGRxXU8&list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9&index=11
