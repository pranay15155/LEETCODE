https://leetcode.com/problems/permutations/description/?envType=problem-list-v2&envId=backtracking


class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> temp;
        int n = nums.size();
        unordered_map<int, int> mp;
        auto f = [&](auto&& self, int ind, vector<int>& temp) -> void {
            if (temp.size()==n) {
                ans.push_back(temp);
                return;
            }
            for (int i = 0; i < n; i++) {
                if (mp[nums[i]] == 0) {
                    temp.push_back(nums[i]);
                    mp[nums[i]]++;
                    self(self, i + 1, temp);
                    temp.pop_back();
                    mp[nums[i]]--;
                }
            }
        };
        f(f, 0, temp);
        return ans;
    }
};


class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int n = nums.size();
        auto f = [&](auto&& self, int ind, vector<int>& nums) -> void {
            if (ind==n) {
                ans.push_back(nums);
                return;
            }
            for (int i = ind; i < n; i++) {
                swap(nums[ind],nums[i]);
                self(self,ind+1,nums);
                swap(nums[ind],nums[i]);
            }
        };
        f(f, 0, nums);
        return ans;
    }
};
