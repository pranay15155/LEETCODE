https://leetcode.com/problems/jump-game-ii/description/?envType=problem-list-v2&envId=dynamic-programming

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        auto f=[&](auto &&self,int ind)->int{
           if(ind>=n-1)return dp[n-1]=0;
           if(dp[ind]!=-1)return dp[ind];
           int ans=1e9;
           for(int steps=1;steps<=nums[ind];steps++){
             ans=min(ans,self(self,ind+steps)+1);
           }
           return dp[ind]=ans;
        };
        f(f,0);
        return dp[0];
    }
};

//Remember that each dp[i] signies that what will be the steps needed to reach 
//n-1 from i 
