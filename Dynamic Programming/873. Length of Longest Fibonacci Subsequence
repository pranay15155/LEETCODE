https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/description/?envType=daily-question&envId=2025-02-27

//RECURSION

class Solution {
public:
    int f(int i,int j,unordered_map<int,int>&mp,vector<int>& arr){
        // d2(i,j);
        int index=-1;
        int target=arr[j]+arr[i];
        if(mp.find(target)!=mp.end()){
            index=mp[target];
        }
        if(index!=-1 && index>j){
         int t=f(j,index,mp,arr);
         if(t!=-1)return 1+t; 
         return 1; 
        }
        return -1;
    }
    int lenLongestFibSubseq(vector<int>& arr) {
        int n=arr.size();
        int ans=0;
        unordered_map<int,int>mp;
        for(int i=0;i<n;i++){
            mp[arr[i]]=i;
        }
        // d(mp);
        for(int i=0;i<n-2;i++){
            for(int j=i+1;j<n-1;j++){
               int t=f(i,j,mp,arr);
               if(t!=-1)ans=max(ans,2+t);
            }
        }
        return ans;
    }
};
//0 1 2 3 4 5 6 7->index 

//1 2 3 4 5 6 7 8->arr

//0 1 2 4 7->index
//1 2 3 5 8->arr


// (i,j)
// (0,1)
// (1,2)+1
// (2,4)+1
// (4,7)+1



//MEMOISATION

class Solution {
public:
    int f(int i,int j,unordered_map<int,int>&mp,vector<int>& arr,vector<vector<int>>&dp){
        if(dp[i][j]!=-1)return dp[i][j];
        int index=-2;
        int target=arr[j]+arr[i];
        if(mp.find(target)!=mp.end()){
            index=mp[target];
        }
        if(index!=-1 && index>j){
         int t=f(j,index,mp,arr,dp);
         if(t!=-2)return dp[i][j]=1+t; 
         return dp[i][j]=1; 
        }
        return dp[i][j]=-2;
    }
    int lenLongestFibSubseq(vector<int>& arr) {
        int n=arr.size();
        int ans=0;
        unordered_map<int,int>mp;
        for(int i=0;i<n;i++){
            mp[arr[i]]=i;
        }
        vector<vector<int>>dp(n,vector<int>(n,-1));
        // d(mp);
        for(int i=0;i<n-2;i++){
            for(int j=i+1;j<n-1;j++){
               int t=f(i,j,mp,arr,dp);
               if(t!=-2)ans=max(ans,2+t);
            }
        }
        return ans;
    }
};

//memoisation is not at all intuitive in this question so if possible donot waste 
//time in how memoisation store just understand recursion code and skip
