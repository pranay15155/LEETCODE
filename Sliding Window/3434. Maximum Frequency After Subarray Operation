https://leetcode.com/problems/maximum-frequency-after-subarray-operation/description/



class Solution {
public:
    int f(int target, int k, vector<int>& nums) {
        int l = 0, r = 0;
        int n = nums.size();
        int count_target = 0, count_k = 0;
        int maxi = 0;
        int start_index = -1;
        int end_index = -1;
        // here start_index=-1  and end_index = -1 is important suppose a window
        // having whole array nums then if
        //  we take any other value of start and end then some of the k will be missed out than this will give wrong ans
        int ans = 0;
        while (r < n) {
            if (nums[r] == target)
                count_target++;
            if (nums[r] == k)
                count_k++;

            while (l <= r && (count_target <= count_k)) {
                if (nums[l] == target)count_target--;
                if (nums[l] == k)count_k--;
                l++;
            }

            if (maxi < count_target - count_k) {
                maxi = count_target - count_k;//in our current window when we add x to k it will change hence it will not contribute 
                ans = count_target; //only values equal to target will contribute in the highest frequency 
                start_index = l;
                end_index = r;
            }
            r++;
        }
        for (int i = 0; i < start_index; i++) {
            if (nums[i] == k)
                ans++;
        }
        for (int i = n - 1; i > end_index; i--) {
            if (nums[i] == k)
                ans++;
        }
        return ans;
    }
    int maxFrequency(vector<int>& nums, int k) {
        int ans = 0;
        for (int i = 1; i <= 50; i++) {
            int t = f(i, k, nums);
            ans = max(ans, t);
        }
        return ans;
    }
};

// edge cases 

// [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
// k=10


// [1,16,35,3,32,1,10,34,2,47,2,50,23,23,22,27,18,43,35,30,27,40,17,39,1,34,28,17,43,2,15,31,46,34,35,15,7,33,26,44,45,20,35,40,22,6,41,45,20,25,33,12,15,18,6,48,2,45,26,15,15,37,26,24,32,41,14,35,20,40,5,45,24,10,20,6,18,4,18,7,24,32,27,6,27,5,28,38,38,26,25,35,2,32,31,36,26,19,5,5,18,37,23,47,47,39,49,36,41,43,9,50,3,33,44,43,26,20,21,10,18,11,36,35,3,38,8,4,39,17,15,27,27,8,30,43,18,29,14,29,4,1,1,34,4,33,19,45,18,13,10,48,24,10,26,30,8,12,2,41,43,34,24,25,43,32,31,2,31,29,13,27,24,45,19,41,40,19,39,16,43,39,5,39,42,14,11,39,39,35,14,21,21,15,41,8,3,19,15,21,26,39,33,22,48,12,13,47,29,11,49,25,2,41,37,50,15,4,33,7,9,18,24,29,50,13,40,33,5,50,26,50,37,49,25,49,33,20,50,48,6,13,32,49,46,12,2,22,41,9,26,32,16,8,43,29,36,42,43,23,27,6,24,32,38,25,24,39,28,16,49,39,9,32,20,45,9,19,7,42,22,41,45,14,3,44,25,46,47,19,42,26,6,11,30,26,47,24,19,11,30,24,32,16,14,9,26,9,23,28,12,33,6,42,41,30,15,37,36,43,29,26,37,25,47,8,7,43,45,33,12,43,31,3,40,44,31,7,26,43,6,26,7,50,50,50,22,47,11,31,14,28,41,46,19,45,6,39,3,39,2,36,43,20,41,46,18,38,14,23,15,11,39,20,1,21,47,8,46,25,18,14,41,46,45,41,42,41,41,20,25,43,43,44,48,24,35,35,49,39,35,20,22,13,11,14,43,37,17,26,15,5,22,38,4,22,2,46,48,34,29,37,39,37,6,11,9,9,47,1,14,24,39,34,37,5,11,10,39,49,17,35,15,17,23,3,34,44,10,32,38,22,31,1,42,33,31,28,22,5,16,9,27,3,31,33,3,1,7,8,41,4,34,7,16,43,13,38,26,25,17,2,27,10,19,2,47,19,39,38,27,46,45,9,42,27,43,12,9,48]
//k=19


//[6,1,6]
// k=1
