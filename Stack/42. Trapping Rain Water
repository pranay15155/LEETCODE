https://leetcode.com/problems/trapping-rain-water/description/

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        vector<int>prefix_max(n,-1);
        vector<int>suffix_max(n,-1);
        for(int i=1;i<n;i++){
           prefix_max[i]=max(prefix_max[i-1],height[i-1]);
        }
        for(int i=n-2;i>=0;i--){
            suffix_max[i]=max(suffix_max[i+1],height[i+1]);
        }
        // d(prefix_max);
        // d(suffix_max);
        int ans=0;
        for(int i=0;i<n;i++){
            if(prefix_max[i]>height[i] && suffix_max[i]>height[i]){
                ans+=min(prefix_max[i],suffix_max[i])-height[i];
            }
        }
        return ans;
    }
};

//METHOD-2
//TWO POINTER APPROACH
class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        int n = height.size();
        int l = 0, r = n - 1, l_max = 0, r_max = 0;
        while (l < r) {
            if (height[l] < height[r]) {
                if (height[l] >= l_max) {
                    l_max = height[l];
                } else {
                    ans += l_max - height[l];
                }
                l++;
            }
             else {
                if (height[r] >= r_max) {
                    r_max = height[r];
                } else {
                    ans += r_max - height[r];
                }
                r--;
            }
        }
        return ans;
    }
};
//dry run on this code to understand it better it is not a very intuitive method
//but is a very simple two pointer approach is easily understandable 
