https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/description/?envType=daily-question&envId=2025-04-04

explanation video-->https://www.youtube.com/watch?v=ylpPcln87hI&t=10s

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, map<TreeNode*, int>& mp,int max_level) {
        if (!root || mp[root] == max_level)
            return root;
        TreeNode* left = lowestCommonAncestor(root->left,mp,max_level);
        TreeNode* right = lowestCommonAncestor(root->right,mp,max_level);
        if (left != NULL && right != NULL)
            return root;
        if (left)return left;
        if (right)return right;
        return NULL;
    }
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        map<TreeNode*, int> mp;
        queue<TreeNode*> q;
        q.push(root);
        int level = 0;
        while (q.size()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode* temp = q.front();
                q.pop();
                if (temp->left == NULL && temp->right == NULL) {
                    mp[temp] = level;
                }
                if (temp->left)
                    q.push(temp->left);
                if (temp->right)
                    q.push(temp->right);
            }
            level++;
        }
        int max_level = 0;
        for (auto& x : mp) {
            max_level = max(max_level, x.second);
        }
        return lowestCommonAncestor(root,mp,max_level);
    }
};

// edge case
// [1,3,2,14,10,4,6,null,null,null,11,8,5,9,7,null,null,15,null,16,13,null,null,12]
