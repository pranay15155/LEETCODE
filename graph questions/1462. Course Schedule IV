https://leetcode.com/problems/course-schedule-iv/

//brute force approach simple dfs 
class Solution {
public:
    bool dfs(int node,int target,vector<vector<int>>&graph,vector<int>&vis){
        vis[node]=1;
        for(auto &x:graph[node]){
            if(vis[x]==0){
                if(target==x)return 1;
                if(dfs(x,target,graph,vis)==1)return 1;
            }
        }
        return 0;
    }
    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& p, vector<vector<int>>& q) {
        vector<vector<int>>graph(n);
        for(int i=0;i<p.size();i++){
            graph[p[i][1]].push_back(p[i][0]);
        }
        vector<bool>ans(q.size(),0);
        for(int i=0;i<q.size();i++){
            vector<int>vis(n,0);
            ans[i]=dfs(q[i][1],q[i][0],graph,vis);
        }
        return ans;
    }
};








//OPTIMISED APPROACH

//nice topological sort problem of kahn algo worth trying 
class Solution {
public:
    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& p, vector<vector<int>>& q) {
        unordered_map<int,unordered_set<int>>mp;
        vector<vector<int>>graph(n);
        vector<int>indegree(n,0);
        for(int i=0;i<p.size();i++){
            graph[p[i][0]].push_back(p[i][1]);
            indegree[p[i][1]]++;
        }
        queue<int>qu;
        for(int i=0;i<n;i++){
            if(indegree[i]==0)qu.push(i);
        }
        while(qu.size()){
            int node=qu.front();
            qu.pop();
            for(auto &x:graph[node]){
                indegree[x]--;
                if(indegree[x]==0)qu.push(x);
                mp[x].insert(node);
                for(auto &y:mp[node]){
                   mp[x].insert(y);
                }
            }
        }
        vector<bool>ans(q.size(),0);
        for(int i=0;i<q.size();i++){
            int u=q[i][0];
            int v=q[i][1];
            if(mp[v].find(u)!=mp[v].end())ans[i]=1;
        }
        return ans;
    }
};
