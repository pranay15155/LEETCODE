https://leetcode.com/problems/redundant-connection/description/?envType=daily-question&envId=2025-01-29


//DSU nice problem 
class Solution {
public:
    int find_parent(int node,vector<int>&parent){
        if(node==parent[node])return node;
        return parent[node]=find_parent(parent[node],parent);
    }
    void ubs(int u,int v,vector<int>&parent,vector<int>&size){
        int pu=find_parent(u,parent);
        int pv=find_parent(v,parent);
        if(pu!=pv){
            if(size[pu]>=size[pv]){
                size[pu]+=size[pv];
                parent[pv]=pu;
            }
            else{
                size[pv]+=size[pu];
                parent[pu]=pv;
            }
        }
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n=edges.size();
        vector<int>size(n,1),parent(n,0);
        for(int i=0;i<n;i++){
            parent[i]=i;
        }
        vector<int>ans;
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0]-1;
            int v=edges[i][1]-1;
            int pu=find_parent(u,parent);
            int pv=find_parent(v,parent);
            if(pu==pv){
                ans.push_back(u+1);
                ans.push_back(v+1);
            }
            else ubs(u,v,parent,size);
        }
        return ans;
    }
};
