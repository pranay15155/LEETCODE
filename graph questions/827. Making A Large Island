https://leetcode.com/problems/making-a-large-island/description/?envType=daily-question&envId=2025-01-31


//very nice and tough dsu problem worth spending every minute 
class Solution {
public:
    int n;
     int find_parent(int node,vector<int>&parent){
        if(node==parent[node])return node;
        return parent[node]=find_parent(parent[node],parent);
    }
    void union_by_size(int u,int v,vector<int>&parent,vector<int>&size){
        int pu=find_parent(u,parent);
        int pv=find_parent(v,parent);
        if(pu!=pv){
            if(size[pu]>=size[pv]){
                parent[pv]=pu;
                size[pu]+=size[pv];
            }
            else{
                parent[pu]=pv;
                size[pv]+=size[pu];
            }
        }
    }
    bool check(int row,int col){
        if(row>=n || row<0 || col>=n || col<0)return 0;
        return 1;
    }
    void dfs(int row,int col,vector<vector<int>>& grid,vector<int>&parent,vector<int>&size,vector<vector<int>>&vis){
        vis[row][col]=1;
        int dr[4]={-1,0,1,0};
        int dc[4]={0,1,0,-1};
        for(int i=0;i<4;i++){
            int nr=row+dr[i];
            int nc=col+dc[i];
            if(check(nr,nc) && vis[nr][nc]==0 && grid[nr][nc]==1){
                int one=n*row+col;
                int two=n*nr+nc;
                union_by_size(one,two,parent,size);
                dfs(nr,nc,grid,parent,size,vis);
            }
        }
    }
    int largestIsland(vector<vector<int>>& grid) {
        n=grid.size();
        vector<int>parent(n*n,0),size(n*n,1);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                int no=n*i+j;
                parent[no]=no;
            }
        }
        vector<vector<int>>vis(n,vector<int>(n,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]==0 && grid[i][j]==1){
                    dfs(i,j,grid,parent,size,vis);
                }
            }
        }
        int dr[4]={-1,0,1,0};
        int dc[4]={0,1,0,-1};
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    set<int>temp;
                    for(int k=0;k<4;k++){
                        int nrow=i+dr[k];
                        int ncol=j+dc[k];
                        if(check(nrow,ncol) && grid[nrow][ncol]==1){
                            int node=nrow*n+ncol;
                            int pu=find_parent(node,parent);
                            temp.insert(pu);
                        }
                    }
                    int t=1;
                    for(auto &x:temp){
                        t+=size[x];
                    }
                    ans=max(ans,t);
                }
            }
        }
        for(int i=0;i<n*n;i++){
            ans=max(ans,size[i]);
        }
        return ans;
    }
};
// 1 0
// 0 1

// 1 1
// 1 0

